@startuml

left to right direction

class RumClass {
    boundary : RumBoundary
    stateVariables : RumStateVariable []
    dirtyMasks : RumDirtyMask []
    rendering : RumRenderingStatement
}
RumElement <|-- RumClass
RumScope <|-u- RumClass

class RumExpression {
    dependencies : RumDependencies
}
RumElement <|-- RumExpression

class RumEntryPoint {
    root : RumClass
}
RumElement <|-- RumEntryPoint

class RumExternalStateVariable
RumStateVariable <|-- RumExternalStateVariable

class RumInternalStateVariable
RumStateVariable <|-- RumInternalStateVariable

class RumStateVariable {
    index : Int
}
RumElement <|-- RumStateVariable

class RumDirtyMask
RumElement <|-- RumDirtyMask

class RumBlock {
    statements : RumRenderingStatement []
}
RumRenderingStatement <|-- RumBlock

class RumWhen {
    branches : RumBranch []
}
RumRenderingStatement <|-- RumWhen

class RumCall {
    target : RumClass
    valueArguments : RumValueArgument []
}
RumRenderingStatement <|-- RumCall

class RumForLoop {
    iterator : RumDeclaration
    condition : RumExpression
    loopVariable : RumDeclaration
    body : RumRenderingStatement
}
RumRenderingStatement <|-- RumForLoop

class RumHigherOrderCall {
    higherOrderArguments : RumHigherOrderArgument []
}
RumCall <|-- RumHigherOrderCall

class RumRenderingStatement
RumElement <|--- RumRenderingStatement

class RumHigherOrderArgument {
    stateVariables : RumStateVariable []
    rendering : RumRenderingStatement
}
RumExpression <|-- RumHigherOrderArgument
RumScope <|-r- RumHigherOrderArgument

class RumBranch {
    condition : RumExpression
    result : RumRenderingStatement
}
RumElement <|-- RumBranch

class RumDeclaration {
    dependencies : RumDependencies
}
RumElement <|-- RumDeclaration

class RumValueArgument
RumExpression <|-- RumValueArgument

interface RumScope {
    stateSize : Int
}

class RumElement {
    parent : RumElement ?
}

@enduml