@startuml

left to right direction

class AirClass {
    rumElement : RumClass

    irClass : IrClass

    adapter : IrProperty
    scope : IrProperty
    externalPatch : IrProperty
    fragment : IrProperty

    constructor : IrConstructor
    initializer : IrAnonymousInitializer

    patch : IrSimpleFunction

    stateVariableMap : AirStateVariable {}
    stateVariableList : AirStateVariable []

    dirtyMasks : AirDirtyMask []

    rendering: AirBuilder

    functions : AirFunction []
}
AirElement <|-- AirClass

class AirEntryPoint {
    rumElement : RumClass
    airClass : AirClass
}
AirElement <|-- AirEntryPoint

class AirBuilderBlock {
    rumElement : RumBlock
}
AirBuilder <|-- AirBuilderBlock

class AirBuilderCall {
    rumElement : RumCall
}
AirBuilder <|-- AirBuilderCall

class AirBuilderWhen {
    rumElement : RumWhen
}
AirBuilder <|-- AirBuilderWhen

interface AirBuilder {
    externalPatch : AirExternalPatch
    subBuilders : AirBuilder
}
AirFunction <|-- AirBuilder

class AirExternalPatchBlock {
    rumElement : RumBlock
}
AirExternalPatch <|-- AirExternalPatchBlock

class AirExternalPatchCall {
    rumElement : RumCall
}
AirExternalPatch <|-- AirExternalPatchCall

interface AirExternalPatch
AirFunction <|-- AirExternalPatch

class AirSelect {
    rumElement : RumWhen
}
AirFunction <|-- AirSelect

interface AirFunction {
    rumElement: RumRenderingStatement
    symbolMap : RuiClassSymbols
    irFunction : IrSimpleFunction
}
AirElement <|-- AirFunction

class AirStateVariable {
    rumElement : RumStateVariable
}
AirProperty <|-- AirStateVariable

class AirDirtyMask {
    rumElement : RumDirtyMask
    invalidate : IrSimpleFunction
}
AirProperty <|-- AirDirtyMask

interface AirProperty {
    rumElement: RumElement
    irProperty : IrProperty
}
AirElement <|-- AirProperty

interface AirElement {
    rumElement : RumElement
}

@enduml